// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LAPTemplateMVC.Models;
using LAPTemplateMVC.Models.dboSchema;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace LAPTemplateMVC.Models
{
    public partial interface IchatlerContextProcedures
    {
        Task<int> ChatuserDeleteAsync(long? CHATUSERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ChatuserGetAllResult>> ChatuserGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ChatuserGetByChatuserIDResult>> ChatuserGetByChatuserIDAsync(long? CHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<ChatuserInsertResult>> ChatuserInsertAsync(string USERNAME, string PUBLICKEY, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> ChatuserUpdateAsync(long? CHATUSERID, string USERNAME, string PUBLICKEY, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> MessageDeleteAsync(long? MESSAGEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetAllResult>> MessageGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetByMessageIDResult>> MessageGetByMessageIDAsync(long? MESSAGEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetByReceiverchatuserIDResult>> MessageGetByReceiverchatuserIDAsync(long? RECEIVERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetByReceiveruserIDResult>> MessageGetByReceiveruserIDAsync(long? RECEIVERUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetBySenderchatuserIDResult>> MessageGetBySenderchatuserIDAsync(long? SENDERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetBySenderchatuserIDReceiverchatuserIDResult>> MessageGetBySenderchatuserIDReceiverchatuserIDAsync(long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetBySenderuserIDResult>> MessageGetBySenderuserIDAsync(long? SENDERUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageGetBySenderuserIDReceiveruserIDResult>> MessageGetBySenderuserIDReceiveruserIDAsync(long? SENDERUSERID, long? RECEIVERUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<MessageInsertResult>> MessageInsertAsync(long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, string ENCRYPTEDMESSAGE, string ENCRYPTEDSYMMETRICKEY, DateTime? TIMESTAMP, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<int> MessageUpdateAsync(long? MESSAGEID, long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, string ENCRYPTEDMESSAGE, string ENCRYPTEDSYMMETRICKEY, DateTime? TIMESTAMP, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<UserDeleteResult>> UserDeleteAsync(long? USERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
        Task<List<UserUpdateResult>> UserUpdateAsync(long? USERID, string USERNAME, string PUBLICKEY, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default);
    }
}
