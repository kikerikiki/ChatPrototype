// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LAPTemplateMVC.Models;
using LAPTemplateMVC.Models.dboSchema;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace LAPTemplateMVC.Models
{
    public partial class chatlerContext
    {
        private IchatlerContextProcedures _procedures;

        public virtual IchatlerContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new chatlerContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IchatlerContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class chatlerContextProcedures : IchatlerContextProcedures
    {
        private readonly chatlerContext _context;

        public chatlerContextProcedures(chatlerContext context)
        {
            _context = context;
        }

        public virtual async Task<int> ChatuserDeleteAsync(long? CHATUSERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ChatuserDelete] @CHATUSERID = @CHATUSERID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ChatuserGetAllResult>> ChatuserGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ChatuserGetAllResult>("EXEC @returnValue = [dbo].[ChatuserGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ChatuserGetByChatuserIDResult>> ChatuserGetByChatuserIDAsync(long? CHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ChatuserGetByChatuserIDResult>("EXEC @returnValue = [dbo].[ChatuserGetByChatuserID] @CHATUSERID = @CHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ChatuserInsertResult>> ChatuserInsertAsync(string USERNAME, string PUBLICKEY, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "USERNAME",
                    Size = 100,
                    Value = USERNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PUBLICKEY",
                    Value = PUBLICKEY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "PASSWORDHASH",
                    Size = 512,
                    Value = PASSWORDHASH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CREATEDAT",
                    Value = CREATEDAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ChatuserInsertResult>("EXEC @returnValue = [dbo].[ChatuserInsert] @USERNAME = @USERNAME, @PUBLICKEY = @PUBLICKEY, @PASSWORDHASH = @PASSWORDHASH, @CREATEDAT = @CREATEDAT, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ChatuserUpdateAsync(long? CHATUSERID, string USERNAME, string PUBLICKEY, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHATUSERID",
                    Value = CHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "USERNAME",
                    Size = 100,
                    Value = USERNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PUBLICKEY",
                    Value = PUBLICKEY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "PASSWORDHASH",
                    Size = 512,
                    Value = PASSWORDHASH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CREATEDAT",
                    Value = CREATEDAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ChatuserUpdate] @CHATUSERID = @CHATUSERID, @USERNAME = @USERNAME, @PUBLICKEY = @PUBLICKEY, @PASSWORDHASH = @PASSWORDHASH, @CREATEDAT = @CREATEDAT, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MessageDeleteAsync(long? MESSAGEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MESSAGEID",
                    Value = MESSAGEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MessageDelete] @MESSAGEID = @MESSAGEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetAllResult>> MessageGetAllAsync(short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetAllResult>("EXEC @returnValue = [dbo].[MessageGetAll] @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetByMessageIDResult>> MessageGetByMessageIDAsync(long? MESSAGEID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MESSAGEID",
                    Value = MESSAGEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetByMessageIDResult>("EXEC @returnValue = [dbo].[MessageGetByMessageID] @MESSAGEID = @MESSAGEID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetByReceiverchatuserIDResult>> MessageGetByReceiverchatuserIDAsync(long? RECEIVERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetByReceiverchatuserIDResult>("EXEC @returnValue = [dbo].[MessageGetByReceiverchatuserID] @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetByReceiveruserIDResult>> MessageGetByReceiveruserIDAsync(long? RECEIVERUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RECEIVERUSERID",
                    Value = RECEIVERUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetByReceiveruserIDResult>("EXEC @returnValue = [dbo].[MessageGetByReceiveruserID] @RECEIVERUSERID = @RECEIVERUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetBySenderchatuserIDResult>> MessageGetBySenderchatuserIDAsync(long? SENDERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetBySenderchatuserIDResult>("EXEC @returnValue = [dbo].[MessageGetBySenderchatuserID] @SENDERCHATUSERID = @SENDERCHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetBySenderchatuserIDReceiverchatuserIDResult>> MessageGetBySenderchatuserIDReceiverchatuserIDAsync(long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetBySenderchatuserIDReceiverchatuserIDResult>("EXEC @returnValue = [dbo].[MessageGetBySenderchatuserIDReceiverchatuserID] @SENDERCHATUSERID = @SENDERCHATUSERID, @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetBySenderuserIDResult>> MessageGetBySenderuserIDAsync(long? SENDERUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERUSERID",
                    Value = SENDERUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetBySenderuserIDResult>("EXEC @returnValue = [dbo].[MessageGetBySenderuserID] @SENDERUSERID = @SENDERUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageGetBySenderuserIDReceiveruserIDResult>> MessageGetBySenderuserIDReceiveruserIDAsync(long? SENDERUSERID, long? RECEIVERUSERID, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERUSERID",
                    Value = SENDERUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RECEIVERUSERID",
                    Value = RECEIVERUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageGetBySenderuserIDReceiveruserIDResult>("EXEC @returnValue = [dbo].[MessageGetBySenderuserIDReceiveruserID] @SENDERUSERID = @SENDERUSERID, @RECEIVERUSERID = @RECEIVERUSERID, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MessageInsertResult>> MessageInsertAsync(long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, string ENCRYPTEDMESSAGE, string ENCRYPTEDSYMMETRICKEY, DateTime? TIMESTAMP, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ENCRYPTEDMESSAGE",
                    Value = ENCRYPTEDMESSAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ENCRYPTEDSYMMETRICKEY",
                    Value = ENCRYPTEDSYMMETRICKEY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TIMESTAMP",
                    Value = TIMESTAMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MessageInsertResult>("EXEC @returnValue = [dbo].[MessageInsert] @SENDERCHATUSERID = @SENDERCHATUSERID, @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @ENCRYPTEDMESSAGE = @ENCRYPTEDMESSAGE, @ENCRYPTEDSYMMETRICKEY = @ENCRYPTEDSYMMETRICKEY, @TIMESTAMP = @TIMESTAMP, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MessageUpdateAsync(long? MESSAGEID, long? SENDERCHATUSERID, long? RECEIVERCHATUSERID, string ENCRYPTEDMESSAGE, string ENCRYPTEDSYMMETRICKEY, DateTime? TIMESTAMP, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MESSAGEID",
                    Value = MESSAGEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SENDERCHATUSERID",
                    Value = SENDERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "RECEIVERCHATUSERID",
                    Value = RECEIVERCHATUSERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ENCRYPTEDMESSAGE",
                    Value = ENCRYPTEDMESSAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ENCRYPTEDSYMMETRICKEY",
                    Value = ENCRYPTEDSYMMETRICKEY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TIMESTAMP",
                    Value = TIMESTAMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MessageUpdate] @MESSAGEID = @MESSAGEID, @SENDERCHATUSERID = @SENDERCHATUSERID, @RECEIVERCHATUSERID = @RECEIVERCHATUSERID, @ENCRYPTEDMESSAGE = @ENCRYPTEDMESSAGE, @ENCRYPTEDSYMMETRICKEY = @ENCRYPTEDSYMMETRICKEY, @TIMESTAMP = @TIMESTAMP, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserDeleteResult>> UserDeleteAsync(long? USERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "USERID",
                    Value = USERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserDeleteResult>("EXEC @returnValue = [dbo].[UserDelete] @USERID = @USERID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserUpdateResult>> UserUpdateAsync(long? USERID, string USERNAME, string PUBLICKEY, string PASSWORDHASH, DateTime? CREATEDAT, short? VALID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "USERID",
                    Value = USERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "USERNAME",
                    Size = 100,
                    Value = USERNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PUBLICKEY",
                    Value = PUBLICKEY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "PASSWORDHASH",
                    Size = 512,
                    Value = PASSWORDHASH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CREATEDAT",
                    Value = CREATEDAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "VALID",
                    Value = VALID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserUpdateResult>("EXEC @returnValue = [dbo].[UserUpdate] @USERID = @USERID, @USERNAME = @USERNAME, @PUBLICKEY = @PUBLICKEY, @PASSWORDHASH = @PASSWORDHASH, @CREATEDAT = @CREATEDAT, @VALID = @VALID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
